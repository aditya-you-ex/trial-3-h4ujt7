# ------------------------------------------------------------------------------
# SERVER CONFIGURATION
# ------------------------------------------------------------------------------
# Defines the overarching environment setup and server runtime parameters
# Used across the Node.js backend services for TaskStream AI. Referenced primarily
# by our main server initialization logic, API Gateway configuration, and logging modules.

NODE_ENV=development          # Sets the current environment (development, staging, production)
PORT=3000                    # Port on which the backend server listens for incoming requests
API_VERSION=v1               # Version prefix used in HTTP routes (e.g., /v1)
LOG_LEVEL=info               # Log level for the backend ("error", "warn", "info", "debug")
DEBUG_MODE=false             # Enables or disables extended debugging output in certain modules

# ------------------------------------------------------------------------------
# DATABASE CONFIGURATION
# ------------------------------------------------------------------------------
# Used by 'databaseConfig' in ./config/database.ts for high-availability and
# replication. Master connection parameters and optional replica hosts are
# configured below. SSL settings enforce encryption in transit. Connection pooling
# ensures we manage concurrency effectively.

DB_MASTER_HOST=localhost             # Primary DB host for write operations
DB_MASTER_PORT=5432                 # PostgreSQL listens on port 5432 by default
DB_SLAVE_HOSTS=localhost:5432,localhost:5433  # Comma-separated read replicas for load balancing
DB_NAME=taskstream                  # Database name for storing TaskStream AI data
DB_USER=postgres                    # PostgreSQL username
DB_PASSWORD=postgres                # PostgreSQL password (use secure secrets in production)
DB_SSL_MODE=verify-full             # SSL verification mode ("disable", "require", or "verify-full")
DB_SSL_CA=/path/to/ca.crt           # Path to the CA certificate for SSL validation
DB_POOL_MIN=5                       # Minimum number of connections in the pool
DB_POOL_MAX=20                      # Maximum number of connections in the pool

# ------------------------------------------------------------------------------
# REDIS CONFIGURATION
# ------------------------------------------------------------------------------
# Used by 'REDIS_CONFIG' in ./config/redis.ts for caching, real-time data,
# and cluster management. Security features include password usage and TLS for
# advanced data encryption in transit.

REDIS_CLUSTER_ENABLED=true               # Toggle Redis Cluster mode for high availability
REDIS_NODES=localhost:6379,localhost:6380,localhost:6381  # Redis cluster nodes
REDIS_PASSWORD=strong-password           # Password for Redis authentication
REDIS_TLS_ENABLED=true                   # Enables TLS if Redis is configured for secure connections
REDIS_KEY_PREFIX=taskstream:             # Key prefix to namespace application data in Redis
REDIS_MAX_RETRIES=3                      # How many times to retry a failing Redis command
REDIS_RETRY_INTERVAL=1000               # Interval (in ms) between Redis command retry attempts

# ------------------------------------------------------------------------------
# ELASTICSEARCH CONFIGURATION
# ------------------------------------------------------------------------------
# Referenced by 'ES_CONFIG' in ./config/elasticsearch.ts to set up node addresses,
# security credentials, and optional APM (Application Performance Monitoring).
# Provides search and analytics capabilities across TaskStream AI.

ES_NODES=http://localhost:9200,http://localhost:9201  # Comma-separated ES nodes for load balancing and HA
ES_USERNAME=elastic                                   # Basic auth username for Elasticsearch
ES_PASSWORD=strong-password                           # Basic auth password for Elasticsearch
ES_TLS_ENABLED=true                                   # Enables TLS for secure communication with ES nodes
ES_CA_CERT=/path/to/es-ca.crt                         # Path to the CA certificate for ES SSL verification
ES_APM_SERVER_URL=http://localhost:8200               # APM server endpoint for collecting performance metrics
ES_APM_SECRET_TOKEN=apm-token                         # Secret token used to authenticate with the APM server

# ------------------------------------------------------------------------------
# SECURITY CONFIGURATION
# ------------------------------------------------------------------------------
# Consumed by 'SECURITY_CONFIG' in ./config/security.ts. Includes JWT for
# authentication, encryption keys for securing data, and rate limiting parameters
# to protect from misuse and DDoS attacks.

JWT_SECRET=your-strong-secret-key                      # Critical secret for signing and verifying JWTs
JWT_EXPIRY=1h                                          # Default JWT expiry time (e.g., 1h, 30m)
JWT_REFRESH_EXPIRY=7d                                  # Refresh token lifetime for extended sessions
ENCRYPTION_KEY=your-encryption-key                     # Key used for data encryption (AES-256-GCM recommended)
ALLOWED_ORIGINS=http://localhost:3000,https://app.taskstream.ai  # Comma-separated allowed CORS origins
RATE_LIMIT_WINDOW=15m                                  # Time window for rate limiting (e.g. 15m)
RATE_LIMIT_MAX_REQUESTS=1000                           # Maximum number of requests per rate limit window

# ------------------------------------------------------------------------------
# MONITORING CONFIGURATION
# ------------------------------------------------------------------------------
# Enabling system observability across various layers, including performance metrics,
# distributed tracing, and error reporting. Key for diagnosing issues in production.

PROMETHEUS_ENABLED=true    # Toggles Prometheus metrics endpoint for real-time telemetry
METRICS_PORT=9090         # Port for metrics server (Prometheus scraping)
JAEGER_AGENT_HOST=localhost  # Hostname for Jaeger agent (distributed tracing)
JAEGER_AGENT_PORT=6832       # Port for Jaeger agent communications
SENTRY_DSN=your-sentry-dsn   # DSN for Sentry error monitoring and reporting